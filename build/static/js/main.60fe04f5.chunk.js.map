{"version":3,"sources":["components/List/list.module.scss","components/ListItem/listItem.module.scss","components/Filter/filter.module.scss","redux/contacts/actions.js","components/Form/Form.js","components/ListItem/ListItem.js","components/List/List.js","components/Filter/Filter.js","App/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/Form/form.module.scss"],"names":["module","exports","actions","addContact","createAction","name","number","payload","id","uuid","deleteContact","setFilter","connect","state","contactsItems","contacts","items","filter","dispatch","useState","setName","setNumber","handleChange","e","target","value","saveForm","find","contact","toLowerCase","alert","test","className","s","form","label","type","pattern","title","required","autoComplete","onChange","input","btn","onClick","preventDefault","ListItem","backgroundColorItem","statusCheckbox","classNameBtn","style","item","contactSpan","editCheckbox","setEditCheckbox","filtredContacts","length","includes","doFilter","useEffect","classNameCheckbox","indexOf","backgroundColor","contactsList","hidden","checked","list","map","filterString","itemsReducer","createReducer","action","filterReducer","contactsReducer","combineReducers","contctsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","storeForExport","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.60fe04f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"list_contactsList__3BTPw\",\"list\":\"list_list__2XsKn\",\"hidden\":\"list_hidden__1L9AM\",\"checkboxEdit\":\"list_checkboxEdit__34l5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"listItem_item__2JuYC\",\"btn_delete\":\"listItem_btn_delete__2Xwpv\",\"contactSpan\":\"listItem_contactSpan__2GjW_\",\"hidden-visually\":\"listItem_hidden-visually__2xXfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2WOpW\"};","import { v4 as uuid } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\n// const addContact = (name, number) => ({\n//     type: 'contacts/add',\n//     payload: {\n//         id: uuid(),\n//         name,\n//         number\n//     }\n// })\n\nconst addContact = createAction('contacts/add', (name, number) => {\n    return {\n        payload: {\n            id: uuid(),\n            name,\n            number\n        }\n    }\n})\n\n// const deleteContact = (id) => ({\n//     type: 'contacts/delete',\n//     payload: id\n// })\n\nconst deleteContact = createAction('contacts/delete')\n\n// const setFilter = (filter) => ({\n//     type: 'filter/set',\n//     payload: {filter}\n// })\n\nconst setFilter = createAction('filter/set');\n\nconst actions = { addContact, deleteContact, setFilter };\n\nexport default actions\n","// import React, { useEffect } from \"react\";\nimport React, { useState } from \"react\";\nimport s from './form.module.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/contacts/actions';\n\nfunction Form({ contactsItems, addContact }) {\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    \n    // useEffect(() => {\n    //     localStorage.setItem('phonebookContacts', JSON.stringify(contactsItems))\n    // }, [contactsItems]\n    // )\n    \n    const handleChange = (e) => {\n        const { name, value } = e.target\n        if (name === 'name') {\n            setName(value)\n        }\n        if (name === 'number') {\n            setNumber(value)\n        }\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        saveForm(name, number)\n        setName('')\n        setNumber('')\n    }\n\n    const saveForm = (name, number) => {\n    \n        const regNumber = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n        const regName = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n\n        if (contactsItems.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n            alert(`${name} is already in contacts`)\n        } else {\n            if (name === '' || number === '') {\n                alert(\"Do not save contact without a name or number\")\n            } else {\n                if (!regName.test(name)) {\n                    alert(\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\")\n              } else {\n                if (!regNumber.test(number)) {\n                    alert(\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\")\n                } else {\n                    addContact(name, number)\n                }\n              }\n            }\n        }\n    }\n\n    return (\n        <form className={s.form}>\n\n            <label className={s.label}> Name\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {handleChange}\n                  value={name}\n                  className={s.input}\n                />\n            </label>\n            <br/>\n            <label className={s.label}> Number\n                <input\n                  type=\"tel\"\n                  name=\"number\"\n                  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                  required\n                  autoComplete=\"off\"\n                  onChange = {handleChange}\n                  value={number}\n                  className={s.input}\n                />\n            </label>\n            <br/>\n            <button\n                type=\"submit\"\n                className={s.btn}\n                onClick = {handleSubmit}>\n                Add contact\n            </button>\n            \n        </form>\n    )\n}\n\nForm.propTypes = {\n    addContact: PropTypes.func,\n    contactsItems: PropTypes.array\n}\n\nconst mapStateToProps = state => {\n  return {\n    contactsItems: state.contacts.items,\n    filter: state.contacts.filter\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    addContact: (name, number) => dispatch(actions.addContact(name, number)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from \"react\";\nimport s from './listItem.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function ListItem({\n    contact,\n    backgroundColorItem,\n    deleteContact,\n    statusCheckbox }) {\n\n    const { name, number, id } = contact\n\n    let classNameBtn = 'btn_delete'\n    if (!statusCheckbox) {\n        classNameBtn += ' hidden'\n    }\n\n    return (\n        <li\n            style={backgroundColorItem}\n            className={s.item}>\n            <div className={s.contactSpan}>\n                <span>{name} </span>\n                <span>{number} </span>\n            </div>\n            <button\n                type=\"button\"\n                className={classNameBtn}\n                onClick={() => deleteContact(id)}>\n                Delete\n            </button>\n        </li>\n        )\n}\n\nListItem.propTypes = {\n    backgroundColorItem: PropTypes.object,\n    deleteContact: PropTypes.func,\n    statusCheckbox: PropTypes.bool,\n    contact: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    })\n    }","import React, {useEffect, useState} from \"react\"\nimport ListItem from \"../ListItem/ListItem\"\nimport s from './list.module.scss'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport actions from '../../redux/contacts/actions'\n\nfunction List({contactsItems, filter, deleteContact}) {\n    const [editCheckbox, setEditCheckbox] = useState(false)\n\n    const doFilter = () => {\n        if (contactsItems.length !== 0) {\n            return contactsItems.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\n        }\n    }\n\n    const filtredContacts = doFilter()\n\n    useEffect(() => {\n        if (filtredContacts.length === 0) {\n        setEditCheckbox(false)\n    }}, [filtredContacts.length]\n    )\n\n    let classNameCheckbox = 'checkboxEdit'\n    if (editCheckbox) {\n    classNameCheckbox += ' checkboxEditActive'\n    }\n\n    const backgroundColorItem = contact =>\n        filtredContacts.indexOf(contact) % 2 === 0\n            ? { backgroundColor: 'transparent' }\n            : { backgroundColor: 'white' }\n\n    return (\n        <div className={s.contactsList}>\n            <label className={classNameCheckbox}>\n                Edit\n                <input\n                    type=\"checkbox\"\n                    className={s.hidden}\n                    checked={editCheckbox}\n                    onChange={() => setEditCheckbox(!editCheckbox)}\n                />\n            </label>\n            <ul className={s.list}>\n                {filtredContacts !== 0 &&\n                    filtredContacts.map(contact =>\n                        <ListItem\n                        key={contact.id}\n                        contact={contact}\n                        backgroundColorItem={backgroundColorItem(contact)}\n                        statusCheckbox={editCheckbox}\n                        deleteContact={deleteContact}\n                    />\n                )}\n            </ul>\n        </div>\n    )\n}\n\nList.propTypes = {\n    deleteContact: PropTypes.func,\n    contactsItems: PropTypes.array,\n    filter: PropTypes.string\n}\n    \nconst mapStateToProps = state => {\n  return {\n      contactsItems: state.contacts.items,\n      filter: state.contacts.filter\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    deleteContact: (id) => dispatch(actions.deleteContact(id)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n","import React from \"react\";\nimport s from './filter.module.scss'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport actions from '../../redux/contacts/actions'\n\nfunction Filter ({filter, setFilter}) {\n\n    const handleChange = (e) => {\n        setFilter( e.target.value )\n    }\n\n    return (\n        <label className={s.label}>\n            Find contacts by name \n        <input\n            type=\"text\"\n            name=\"filter\"\n            className={s.input}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            autoComplete=\"off\"\n            onChange = {handleChange}\n            value = {filter}>\n        </input>\n        </label>\n    )\n}\n\nFilter.propTypes = {\n    setFilter: PropTypes.func,\n    filter: PropTypes.string,\n} \n\nconst mapStateToProps = state => {\n  return {\n    filter: state.contacts.filter\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFilter: (filterString) => dispatch(actions.setFilter(filterString))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\nimport './App.css';\nimport Form from '../components/Form'\nimport List from '../components/List'\nimport Filter from '../components/Filter';\nimport { connect } from 'react-redux';\n\nfunction App({ contactsItems }) {\n\n    return (\n      <div className=\"app\">\n        <h1>Phonebook</h1>\n\n        <Form />\n      \n        {contactsItems.length > 0\n          ? (<>\n            <h2>Contacts</h2>\n            <Filter />\n            <List />\n          </>)\n          : (<p>no contacts at the moment</p>)\n        }\n      </div>\n    );\n    \n}\n\nconst mapStateToProps = state => {\n  return {\n    contactsItems: state.contacts.items,\n    filter: state.contacts.filter\n    }\n};\n\nexport default connect(mapStateToProps)(App);\n","\nimport { combineReducers } from 'redux';\nimport actions from './actions'\n\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst initialContacts = [\n    {name:\"my_home\", number:\"1232254\", id:\"43kj5\"}, {name:\"my_work\", number:\"1232254\", id:\"sdgfvev5\"}\n];\n\n// const itemsReducer = ( state = initialContacts, {type, payload} ) => {\n//     switch (type) {\n//         case 'contacts/add':\n//             return [...state, payload];\n//         case 'contacts/delete':\n//             return state.filter(item => item.id !== payload);\n//         default:\n//             return state;\n//     }\n// }\n\nconst itemsReducer = createReducer(initialContacts, {\n    [actions.addContact]: (state, action) => [...state, action.payload],\n    [actions.deleteContact]: (state, action) => state.filter(item => item.id !== action.payload)\n}\n)\n\n// const filterReducer = (state = \"\", {type, payload}) => {\n//     switch (type) {\n//         case 'filter/set':\n//             return payload;\n//         default:\n//             return state;\n//     }\n// }\n\nconst filterReducer = createReducer('', {\n    [actions.setFilter]: (state, actions) => actions.payload\n})\n\nconst contactsReducer = combineReducers({\n    items: itemsReducer,\n    filter: filterReducer\n})\n    \nexport default contactsReducer;","// import { createStore } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { combineReducers } from 'redux';\nimport contactsReducer from './contacts/reducers';\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistReducer,\n    persistStore,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nconst contctsPersistConfig = {\n  key: 'phonebook',\n    storage,\n    blacklist: ['filter']\n}\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n}), logger];\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contctsPersistConfig, contactsReducer)\n    },\n    middleware,\n    // devTools: process.env.MODE.ENV === 'development'\n});\n\nconst persistor = persistStore(store);\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst storeForExport = { store, persistor };\n\nexport default storeForExport;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading=\"\" persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__oKlKm\",\"label\":\"form_label__14Gtg\",\"input\":\"form_input__1ucsV\",\"btn\":\"form_btn__20OJ1\"};"],"sourceRoot":""}