{"version":3,"sources":["components/List/list.module.scss","components/ListItem/listItem.module.scss","components/Filter/filter.module.scss","components/Form/form.module.scss","redux/contacts/selectors.js","redux/contacts/operations.js","components/Form/Form.js","components/ListItem/ListItem.js","components/List/List.js","redux/contacts/actions.js","components/Filter/Filter.js","App/App.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","getContactsItems","state","contacts","items","getContactsFilter","filter","getFiltredContacts","length","item","name","toLowerCase","includes","axios","defaults","baseURL","addContact","createAsyncThunk","a","number","contact","phone","post","data","deleteContact","id","delete","fetchContacts","get","Form","useState","setName","setNumber","contactsItems","useSelector","dispatch","useDispatch","handleChange","e","target","value","saveForm","find","alert","test","className","s","form","label","type","pattern","title","required","autoComplete","onChange","input","btn","onClick","preventDefault","ListItem","backgroundColorItem","statusCheckbox","classNameBtn","style","contactSpan","List","editCheckbox","setEditCheckbox","filtredContacts","delContact","useEffect","classNameCheckbox","indexOf","backgroundColor","contactsList","hidden","checked","list","map","setFilter","createAction","Filter","App","itemsReducer","createReducer","fulfilled","_","payload","filterReducer","actions","contactsReducer","combineReducers","contactsPersistConfig","key","storage","whitelist","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","storeForExport","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c0b4928c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"list_contactsList__3BTPw\",\"list\":\"list_list__2XsKn\",\"hidden\":\"list_hidden__1L9AM\",\"checkboxEdit\":\"list_checkboxEdit__34l5i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"listItem_item__2JuYC\",\"btn_delete\":\"listItem_btn_delete__2Xwpv\",\"contactSpan\":\"listItem_contactSpan__2GjW_\",\"hidden-visually\":\"listItem_hidden-visually__2xXfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"filter_input__2WOpW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__oKlKm\",\"label\":\"form_label__14Gtg\",\"input\":\"form_input__1ucsV\",\"btn\":\"form_btn__20OJ1\"};","export const getContactsItems = state => state.contacts.items;\n\nexport const getContactsFilter = state => state.contacts.filter;\n\nexport const getFiltredContacts = state => {\n    const items = getContactsItems(state);\n    const filter = getContactsFilter(state);\n    if (items.length !== 0) {\n            return items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\n        }\n}","\nimport axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://619d65ca131c600017088eee.mockapi.io/api/v1';\n\nexport const addContact = createAsyncThunk('contacts/addContact',\n    async ({ name, number }) => {\n    const contact = {\n        name,\n        phone: number\n    };\n    const { data } = await axios.post('/contacts', contact);\n    return data;\n    }\n);\n\nexport const deleteContact = createAsyncThunk('contacts/deleteContact',\n    async (id) => {\n        const { data } = await axios.delete(`/contacts/${id}`);\n        return data;\n}\n)\n\nexport const fetchContacts = createAsyncThunk('contacts/fetchContact',\n    async () => {\n        const { data } = await axios.get('/contacts');\n        return data\n     }\n);","import React, { useState } from \"react\";\nimport s from './form.module.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContactsItems } from '../../redux/contacts/selectors';\nimport {addContact} from \"../../redux/contacts/operations\";\n\n\nexport default function Form() {\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contactsItems = useSelector(getContactsItems);\n    const dispatch = useDispatch();\n\n  \n    \n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        if (name === 'name') {\n            setName(value)\n        };\n        if (name === 'number') {\n            setNumber(value)\n        };\n    };\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        saveForm(name, number)\n        setName('')\n        setNumber('')\n    };\n\n    const saveForm = (name, number) => {\n    \n        const regNumber = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n        const regName = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n\n        if (contactsItems.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n            alert(`${name} is already in contacts`)\n        } else {\n            if (name === '' || number === '') {\n                alert(\"Do not save contact without a name or number\")\n            } else {\n                if (!regName.test(name)) {\n                    alert(\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\")\n                } else {\n                    if (!regNumber.test(number)) {\n                        alert(\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\")\n                    } else {\n                        dispatch(addContact({ name, number }))\n\n                    }\n                }\n            }\n        }\n    };\n\n    return (\n        <form className={s.form}>\n\n            <label className={s.label}> Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    autoComplete=\"off\"\n                    onChange={handleChange}\n                    value={name}\n                    className={s.input}\n                />\n            </label>\n            <br />\n            <label className={s.label}> Number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    autoComplete=\"off\"\n                    onChange={handleChange}\n                    value={number}\n                    className={s.input}\n                />\n            </label>\n            <br />\n            <button\n                type=\"submit\"\n                className={s.btn}\n                onClick={handleSubmit}>\n                Add contact\n            </button>\n            \n        </form>\n    );\n}\n","import React from \"react\";\nimport s from './listItem.module.scss'\nimport PropTypes from 'prop-types'\n\nexport default function ListItem({\n    contact,\n    backgroundColorItem,\n    deleteContact,\n    statusCheckbox }) {\n\n    const { name, phone, id } = contact\n\n    let classNameBtn = 'btn_delete'\n    if (!statusCheckbox) {\n        classNameBtn += ' hidden'\n    }\n\n    return (\n        <li\n            style={backgroundColorItem}\n            className={s.item}>\n            <div className={s.contactSpan}>\n                <div>\n                <span>{name} </span>\n                </div>\n                <span>{phone} </span>\n            </div>\n            <button\n                type=\"button\"\n                className={classNameBtn}\n                onClick={() => deleteContact(id)}>\n                Delete\n            </button>\n        </li>\n        )\n}\n\nListItem.propTypes = {\n    backgroundColorItem: PropTypes.object,\n    deleteContact: PropTypes.func,\n    statusCheckbox: PropTypes.bool,\n    contact: PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    })\n    }","import React, { useEffect, useState } from \"react\";\nimport ListItem from \"../ListItem/ListItem\";\nimport s from './list.module.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFiltredContacts } from '../../redux/contacts/selectors';\nimport {deleteContact} from '../../redux/contacts/operations'\n\n\nexport default function List() {\n    const [editCheckbox, setEditCheckbox] = useState(false)\n\n    const filtredContacts = useSelector(getFiltredContacts);\n    const dispatch = useDispatch();\n    const delContact = (id) => dispatch(deleteContact(id));\n\n    useEffect(() => {\n        if (filtredContacts.length === 0) {\n            setEditCheckbox(false)\n        }\n    }, [filtredContacts.length]\n    );\n\n    let classNameCheckbox = 'checkboxEdit';\n    if (editCheckbox) {\n    classNameCheckbox += ' checkboxEditActive'\n    };\n\n    const backgroundColorItem = contact =>\n        filtredContacts.indexOf(contact) % 2 === 0\n            ? { backgroundColor: 'transparent' }\n            : { backgroundColor: 'white' };\n\n    return (\n        <div className={s.contactsList}>\n            <label className={classNameCheckbox}>\n                Edit\n                <input\n                    type=\"checkbox\"\n                    className={s.hidden}\n                    checked={editCheckbox}\n                    onChange={() => setEditCheckbox(!editCheckbox)}\n                />\n            </label>\n            <ul className={s.list}>\n                {filtredContacts !== 0 &&\n                    filtredContacts.map(contact =>\n                        <ListItem\n                            key={contact.id}\n                            contact={contact}\n                            backgroundColorItem={backgroundColorItem(contact)}\n                            statusCheckbox={editCheckbox}\n                            deleteContact={delContact}\n                        />\n                    )}\n            </ul>\n        </div>\n    );\n}\n\n\n","\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const setFilter = createAction('filter/set');\n\n","import React from \"react\";\nimport s from './filter.module.scss'\nimport {setFilter} from '../../redux/contacts/actions';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from \"react-redux\";\nimport { getContactsFilter } from '../../redux/contacts/selectors';\n\n\nexport default function Filter() {\n    const filter = useSelector(getContactsFilter);\n    const dispatch = useDispatch();\n    \n    const handleChange = (e) => dispatch(setFilter(e.target.value));\n\n    return (\n        <label className={s.label}>\n            Find contacts by name\n            <input\n                type=\"text\"\n                name=\"filter\"\n                className={s.input}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                autoComplete=\"off\"\n                onChange={handleChange}\n                value={filter}>\n            </input>\n        </label>\n    );\n}\n\n","import React from 'react';\nimport { useEffect } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport './App.css';\nimport Form from '../components/Form'\nimport List from '../components/List'\nimport Filter from '../components/Filter';\nimport { useSelector } from 'react-redux';\nimport { getContactsItems } from '../redux/contacts/selectors';\nimport {fetchContacts} from \"../redux/contacts/operations\";\n\nfunction App() {\n  \n    const dispatch = useDispatch();\n    const contactsItems = useSelector(getContactsItems);\n  \n    useEffect(() => {\n    dispatch(fetchContacts())\n    },\n    // eslint-disable-next-line     \n    [])\n  \n\n    return (\n      <div className=\"app\">\n        <h1>Phonebook</h1>\n\n        <Form />\n      \n        {contactsItems.length > 0\n          ? (<>\n            <h2>Contacts</h2>\n            <Filter />\n            <List />\n          </>)\n          : (<p>no contacts at the moment</p>)\n        }\n      </div>\n    );\n    \n}\n\nexport default App;\n","\nimport { combineReducers } from 'redux';\nimport {setFilter} from './actions';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { fetchContacts, addContact, deleteContact } from './operations';\n\n\nconst initialContacts = [\n];\n\nconst itemsReducer = createReducer(initialContacts, {\n    [fetchContacts.fulfilled]: (_, {payload}) => payload,\n    [addContact.fulfilled]: (state, {payload}) => [...state, payload],\n    [deleteContact.fulfilled]: (state, {payload} ) => state.filter(({id}) => id !== payload.id)\n});\n\nconst filterReducer = createReducer('', {\n    [setFilter]: (state, actions) => actions.payload\n});\n\nconst contactsReducer = combineReducers({\n    items: itemsReducer,\n    filter: filterReducer\n});\n\nexport default contactsReducer;","// import { composeWithDevTools } from 'redux-devtools-extension';\n// import { createStore } from 'redux';\n// import { combineReducers } from 'redux';\nimport contactsReducer from './contacts/reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistReducer,\n    persistStore,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nconst contactsPersistConfig = {\n  key: 'phonebook',\n    storage,\n    whitelist: [],\n    blacklist: ['filter']\n}\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n}), logger];\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, contactsReducer)\n    },\n    middleware,\n    // devTools: process.env.MODE.ENV === 'development'\n});\n\nconst persistor = persistStore(store);\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst storeForExport = { store, persistor };\n\nexport default storeForExport;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading=\"\" persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}